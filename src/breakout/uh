package breakout;
import edu.macalester.graphics.CanvasWindow;
import edu.macalester.graphics.Ellipse;
import edu.macalester.graphics.GraphicsGroup;
import edu.macalester.graphics.GraphicsObject;
import edu.macalester.graphics.Rectangle;
import edu.macalester.graphics.GraphicsText;


import java.awt.Color;
import java.util.Random;

import org.w3c.dom.Text;


public class Ball extends GraphicsGroup {
    private static final double RADIUS = 10;
    private Ellipse ball;
    private double dx, dy;
    private double canvasHeight ;
    private double canvasWidth;
    private boolean showMessage = false;

    private double topLeftX, topLeftY;
    // private double topRightX, topRightY;
    // private double bottomLeftX, bottomLeftY;
    private double bottomRightX, bottomRightY;
    // private double centerTopX, centerBottomX;
    // private double centerTopY, centerBottomY;
    // private double leftCenterX, rightCenterX;
    // private double leftCenterY, rightCenterY;

    public Ball(double centerX, double centerY, double initialSpeedX, double initialSpeedY, double canvasWidth, double canvasHeight){
        // this.canvasWidth = canvasWidth;
        // this.canvasHeight = canvasHeight;
        this.ball = new Ellipse(centerX-RADIUS, centerY - RADIUS, 2*RADIUS, 2*RADIUS);
        this.ball.setFillColor(Color.BLACK);
        // this.dx=10.0;
        // this.dy=10.0;


        Random random = new Random();
        this.dx = random.nextDouble(5.0,15.0);
        if(random.nextBoolean()){
            this.dy=15.0;
        }else {
            this.dy=5.0;
        }
        this.topLeftX=centerX-RADIUS;
        this.topLeftY=centerY-RADIUS;
        this.bottomRightX=centerX+RADIUS;
        this.bottomRightY=centerY+RADIUS;

    }

    // public Ellipse ballShape(){
    //     return ball;
    // }

    public void move(CanvasWindow canvas, Rectangle paddle, BrickManager manager){
        this.ball.moveBy(this.dx,this.dy);
        this.topLeftX = this.ball.getX();
        this.topLeftY = this.ball.getY();
        this.bottomRightX = this.ball.getX() + 2 * RADIUS;
        this.bottomRightY = this.ball.getY() + 2 * RADIUS;


        if (this.topLeftX <= 0 || this.bottomRightX  >= canvas.getWidth()) {
            this.dx = -this.dx;
        }
        if (this.topLeftY <= 0 || this.bottomRightY >= canvas.getHeight()) {
            this.dy = -this.dy;
        }

        if(this.bottomRightY >= canvas.getHeight()){
            // this.dx=0;
            // this.dy=0;
            if(!showMessage){
                this.ball.setPosition(this.ball.getX(),canvas.getHeight()-2*RADIUS-1);
                GraphicsText loseMssg = new GraphicsText("You lost!", canvas.getWidth()/2,canvas.getHeight()/2);
                loseMssg.setCenter(canvas.getWidth() / 2, canvas.getHeight() / 2);
                loseMssg.setFontSize(24);
                loseMssg.setFillColor(Color.RED);
                canvas.add(loseMssg);
                showMessage = true;

                canvas.onClick(event->{
                    canvas.remove(loseMssg);
                    showMessage=false;
                });
            }
            this.dx=0;
            this.dy=0;
            this.ball.setPosition(this.ball.getX(), canvas.getHeight() - 2 * RADIUS - 1);


        if(this.objectCollisions(canvas)==paddle){
            this.dy = -Math.abs(this.dy);
        }

        // if(this.ball.getBounds().intersects(paddle.getBounds())){
        //     this.dy=-Math.abs(this.dy);
        // }

        Brick collidedBrick = manager.getBrickCollision(this);
        if(collidedBrick != null){
            manager.handleCollision(collidedBrick);
            this.dy=Math.abs(this.dy);
        }
        }
    }

    

    



    public GraphicsObject objectCollisions (CanvasWindow canvas){
        GraphicsObject topLeftObj = canvas.getElementAt(this.topLeftX, this.topLeftY);
        GraphicsObject topRightObj = canvas.getElementAt(this.bottomRightX, this.topLeftY);
        GraphicsObject bottomLeftObj = canvas.getElementAt(this.topLeftX, this.bottomRightY);
        GraphicsObject bottomRightObj = canvas.getElementAt(this.bottomRightX, this.bottomRightY);

        // Return the first non-null object (if any) found at the corners
        if (topLeftObj != null) {
            return topLeftObj;
        } else if (topRightObj != null) {
            return topRightObj;
        } else if (bottomLeftObj != null) {
            return bottomLeftObj;
        } else if (bottomRightObj != null) {
            return bottomRightObj;
        } else {
            return null;
        }

    }

    public Ellipse getBall() {
        return this.ball;
    }

    public double getDx() {
        return this.dx;
    }

    public double getDy() {
        return this.dy;
    }

    public void setDx(double dx) {
        this.dx = dx;
    }

    public void setDy(double dy) {
        this.dy = dy;
    }



    public void resetPositionAndVelocity(CanvasWindow canvas){
        double initialX = (canvas.getWidth() - 2 * RADIUS) / 2;
        double initialY = (canvas.getHeight() - 2 * RADIUS) / 2;
        this.ball.setPosition(initialX, initialY);
        // this.dx=10.0;
        // this.dy=10.0;
        Random random = new Random();
        this.dx = random.nextDouble(5.0,15.0);
        if(random.nextBoolean()){
            this.dy=15.0;
        }else {
            this.dy=5.0;
        }

        showMessage=false;
    }


    // public void displayLoseMessage(CanvasWindow canvas){
    //     if (!showMessage) {
    //         GraphicsText loseMssg = new GraphicsText("You lose! Click to play again.", canvas.getWidth() / 2, canvas.getHeight() / 2);
    //         loseMssg.setCenter(canvas.getWidth() / 2, canvas.getHeight() / 2);
    //         loseMssg.setFontSize(24);
    //         loseMssg.setFillColor(Color.RED);
    //         canvas.add(loseMssg);
    //         showMessage = true;

    //         // Add event listener to reset the game upon clicking
    //         canvas.onClick(event -> {
    //             canvas.remove(loseMssg);
    //             showMessage=false;
    //             // Reset game here...
    //         });
    //     }
    // }
}
